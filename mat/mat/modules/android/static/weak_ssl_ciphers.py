import re

from mat.utils.utils import Utils, Issue

class Issue(Issue):

    TITLE       = 'Weak SSL Ciphers Check'
    DESCRIPTION = 'Checks if the application uses weak ssl ciphers'

    ID          = 'ssl-ciphers'
    ISSUE_TITLE = 'Application Uses Weak SSL Ciphers'
    FINDINGS    = 'The Team found the application used weak SSL ciphers:'

    REGEX       = r'import.*javax\.net\.ssl\.SSLSocket'
    CIPHERS     = r'SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA|SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA|SSL_DHE_DSS_WITH_DES_CBC_SHA|SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA|SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA|SSL_DHE_RSA_WITH_DES_CBC_SHA|SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA|SSL_DH_anon_EXPORT_WITH_RC4_40_MD5|SSL_DH_anon_WITH_3DES_EDE_CBC_SHA|SSL_DH_anon_WITH_DES_CBC_SHA|SSL_DH_anon_WITH_RC4_128_MD5|SSL_RSA_EXPORT_WITH_DES40_CBC_SHA|SSL_RSA_EXPORT_WITH_RC4_40_MD5|SSL_RSA_WITH_DES_CBC_SHA|SSL_RSA_WITH_NULL_MD5|SSL_RSA_WITH_NULL_SHA|SSL_RSA_WITH_RC4_128_MD5|SSL_RSA_WITH_RC4_128_SHA|TLS_DHE_DSS_WITH_AES_128_CBC_SHA|TLS_DHE_DSS_WITH_AES_128_CBC_SHA256|TLS_DHE_DSS_WITH_AES_128_GCM_SHA256|TLS_DHE_DSS_WITH_AES_256_CBC_SHA|TLS_DHE_DSS_WITH_AES_256_CBC_SHA256|TLS_DHE_DSS_WITH_AES_256_GCM_SHA384|TLS_DHE_RSA_WITH_AES_128_CBC_SHA|TLS_DHE_RSA_WITH_AES_128_CBC_SHA256|TLS_DHE_RSA_WITH_AES_128_GCM_SHA256|TLS_DHE_RSA_WITH_AES_256_CBC_SHA|TLS_DHE_RSA_WITH_AES_256_CBC_SHA256|TLS_DHE_RSA_WITH_AES_256_GCM_SHA384|TLS_DH_anon_WITH_AES_128_CBC_SHA|TLS_DH_anon_WITH_AES_128_CBC_SHA256|TLS_DH_anon_WITH_AES_128_GCM_SHA256|TLS_DH_anon_WITH_AES_256_CBC_SHA|TLS_DH_anon_WITH_AES_256_CBC_SHA256|TLS_DH_anon_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA|TLS_ECDHE_ECDSA_WITH_NULL_SHA|TLS_ECDHE_ECDSA_WITH_RC4_128_SHA|TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA|TLS_ECDHE_RSA_WITH_NULL_SHA|TLS_ECDHE_RSA_WITH_RC4_128_SHA|TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA|TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA|TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256|TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA|TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384|TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDH_ECDSA_WITH_NULL_SHA|TLS_ECDH_ECDSA_WITH_RC4_128_SHA|TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA|TLS_ECDH_RSA_WITH_AES_128_CBC_SHA|TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256|TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDH_RSA_WITH_AES_256_CBC_SHA|TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384|TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDH_RSA_WITH_NULL_SHA|TLS_ECDH_RSA_WITH_RC4_128_SHA|TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA|TLS_ECDH_anon_WITH_AES_128_CBC_SHA|TLS_ECDH_anon_WITH_AES_256_CBC_SHA|TLS_ECDH_anon_WITH_NULL_SHA|TLS_ECDH_anon_WITH_RC4_128_SHA|TLS_PSK_WITH_3DES_EDE_CBC_SHA|TLS_PSK_WITH_RC4_128_SHA|TLS_RSA_WITH_NULL_SHA256|SSL_RSA_WITH_DES_CBC_SHA|TLS_DHE_DSS_WITH_AES_128_CBC_SHA|TLS_DHE_DSS_WITH_AES_256_CBC_SHA|SSL_DHE_DSS_WITH_DES_CBC_SHA|SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA|SSL_DHE_RSA_WITH_DES_CBC_SHA|SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA|SSL_RSA_EXPORT_WITH_DES40_CBC_SHA|SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA|SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA|SSL_RSA_EXPORT_WITH_RC4_40_MD5|SSL_RSA_WITH_RC4_128_MD5|SSL_RSA_WITH_RC4_128_SHA'
    """ Getting Ciphers
    import requests
    from BeautifulSoup import BeautifulSoup
    url = "https://developer.android.com/reference/javax/net/ssl/SSLSocket.html"
    a = requests.get(url)
    s = BeautifulSoup(a.text)
    trs = s.findAll('tr', attrs={'class': 'deprecated'})
    for i in trs:
        tds = i.findAll('td')
        print tds[1].text if len(tds) == 4 else tds[0].text
    """

    def dependencies(self):
        return self.ANALYSIS.UTILS.check_dependencies(['static'])

    def run(self):
        files = Utils.grep(self.REGEX, self.ANALYSIS.LOCAL_SOURCE)
        if files:
            cipher_files = Utils.grep(self.CIPHERS, self.ANALYSIS.LOCAL_SOURCE)

        if files and cipher_files:
            self.REPORT  = True
            self.DETAILS = Utils.grep_details(cipher_files, self.ANALYSIS.LOCAL_SOURCE)

